//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var databaseManager: databaseManager { .init(source: .init(bundle: bundle, tableName: "DatabaseManager", preferredLanguages: preferredLanguages, locale: locale)) }
    var friendsList: friendsList { .init(source: .init(bundle: bundle, tableName: "FriendsList", preferredLanguages: preferredLanguages, locale: locale)) }

    func databaseManager(preferredLanguages: [String]) -> databaseManager {
      .init(source: .init(bundle: bundle, tableName: "DatabaseManager", preferredLanguages: preferredLanguages, locale: locale))
    }
    func friendsList(preferredLanguages: [String]) -> friendsList {
      .init(source: .init(bundle: bundle, tableName: "FriendsList", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.databaseManager` struct is generated, and contains static references to 2 localization keys.
    struct databaseManager {
      let source: RswiftResources.StringResource.Source

      /// Value: CoreDataDemo
      ///
      /// Key: persistent-container-name
      var persistentContainerName: RswiftResources.StringResource { .init(key: "persistent-container-name", tableName: "DatabaseManager", source: source, developmentValue: nil, comment: nil) }

      /// Value: Unresolved Error: %@
      ///
      /// Key: unresolved-error
      var unresolvedError: RswiftResources.StringResource1<String> { .init(key: "unresolved-error", tableName: "DatabaseManager", source: source, developmentValue: nil, comment: nil) }
    }

    /// This `_R.string.friendsList` struct is generated, and contains static references to 10 localization keys.
    struct friendsList {
      let source: RswiftResources.StringResource.Source

      /// Value: Cancel
      ///
      /// Key: add-friend-alert-cancel
      var addFriendAlertCancel: RswiftResources.StringResource { .init(key: "add-friend-alert-cancel", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Enter name of friend
      ///
      /// Key: add-friend-alert-message
      var addFriendAlertMessage: RswiftResources.StringResource { .init(key: "add-friend-alert-message", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Save
      ///
      /// Key: add-friend-alert-save
      var addFriendAlertSave: RswiftResources.StringResource { .init(key: "add-friend-alert-save", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Add Friend
      ///
      /// Key: add-friend-alert-title
      var addFriendAlertTitle: RswiftResources.StringResource { .init(key: "add-friend-alert-title", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Remove friend
      ///
      /// Key: delete-friend-action-title
      var deleteFriendActionTitle: RswiftResources.StringResource { .init(key: "delete-friend-action-title", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Cancel
      ///
      /// Key: edit-friend-alert-cancel
      var editFriendAlertCancel: RswiftResources.StringResource { .init(key: "edit-friend-alert-cancel", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Enter name of friend
      ///
      /// Key: edit-friend-alert-message
      var editFriendAlertMessage: RswiftResources.StringResource { .init(key: "edit-friend-alert-message", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Save
      ///
      /// Key: edit-friend-alert-save
      var editFriendAlertSave: RswiftResources.StringResource { .init(key: "edit-friend-alert-save", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Edit Friend
      ///
      /// Key: edit-friend-alert-title
      var editFriendAlertTitle: RswiftResources.StringResource { .init(key: "edit-friend-alert-title", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }

      /// Value: Friend List
      ///
      /// Key: navigation-item-title
      var navigationItemTitle: RswiftResources.StringResource { .init(key: "navigation-item-title", tableName: "FriendsList", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `FriendColor`.
    var friendColor: RswiftResources.ColorResource { .init(name: "FriendColor", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `FriendTVCell`.
    var friendTVCell: RswiftResources.NibReferenceReuseIdentifier<FriendTVCell, FriendTVCell> { .init(name: "FriendTVCell", bundle: bundle, identifier: "FriendTVCell") }

    func validate() throws {

    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `FriendTVCell`.
    let friendTVCell: RswiftResources.ReuseIdentifier<FriendTVCell> = .init(identifier: "FriendTVCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = FriendListVC

      let bundle: Foundation.Bundle

      let name = "Main"

      var friendListVC: RswiftResources.StoryboardViewControllerIdentifier<FriendListVC> { .init(identifier: "FriendListVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if friendListVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'friendListVC' could not be loaded from storyboard 'Main' as 'FriendListVC'.") }
      }
    }
  }
}